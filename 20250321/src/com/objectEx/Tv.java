package com.objectEx;
/*
 * 	객체지향언어의 주요 특징
 * 		1. 코드의 재사용성이 높다.
 * 			- 새로운 코드를 작성할 때 기존의 코드를 이용하여 쉽게 작성할 수 있다.
 * 		2. 코드의 관리가 용이하다.
 * 			- 코드 간의 관계를 이용해서 적은 노력으로 쉽게 코드를 변경할 수 있다.
 * 		3. 신뢰성이 높은 프로그래밍을 만들 수 있다.
 * 			- 재어변경자(접근제어자) 와 메소드를 이용하여서 데이터를 보호하고 
 * 				올바른 값이 유지되도록 하며, 코드의 중복을 제거하여 코드의 불일치로 인한
 * 				오동작을 방지할 수 있다.
 *		4. 클래스의 정의 : 객체를 저의 놓은 것 , 객체의 설계도 , 틀
 *  		클래스의 용도 : 클래스의 객체를 생성하는데 사용된다.
 *  		
 *  		객체의 정의 : 실제로 존재하는 것, 사물 또는 개념
 *  		객체의 용도 : 객체가 가지고 있는 속성과 기능에 따라 다르다.
 *  	
 *  		객체의 종류		
 *  		유형의 객체 -책상, 의자, 자동차, 컴퓨터 등.....
 *  		무형의 객체 -공기 , 수학 공식 , 프로그램와 같은 논리나 개념
 *  		
 *  		클래스		----> 객체 
 *  		제품 설계도  ---> 제품 
 *  		TV 설계도		---> TV
 *  		붕어빵 기계  ---> 붕어빵
 *  
 *  		객체를 사용한다는 것은 객체가 가지고 있는 속성과 기능을 사용한다.
 * 			
 * 			인스턴스(instance)
 * 				클래스로 부터 객체를 만드는 과정을 클래스의 인스턴스화라고 한다.
 * 				만들어진 객체를 그 클래스의 인스터스 하고 
 *  
 *  				인스턴스화
 *  		클래스 -------> 인스턴스(객체)
 *  				
 *  
 *  
 *  
 *  	클래스 구성요소 
 * 		필드(속성, 변수, )
 * 		 속성 -> 크기 , 길이 , 높이, 색상, 볼륨 , 채널 ....
 * 		기능 -> 켜기 , 끄기 , 볼륨높이기 , 볼륨 내리기  채널 변경하기
 * 			
 * 
 * 
 */
public class Tv {
		
		//속성 , 멤버 필드
		String color; // 색상
		boolean power; // 전원 상태
		int channel;
		
		//메소드 , 기능, 행위
		void power() {
			power = !power;
			/*
			 * if (power) { power = false; }else power = true;
			 */
		}
		void channelUp() {
			channel ++;
		}	
		void channelDown() {
			channel --;
		}	
}
